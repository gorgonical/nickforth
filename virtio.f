( LOAD core.f BEFORE THIS )

8 VALUE VIRTIO-QSZ

( not really sure how we pick this size. it's just a space in memory? )
VIRTIO-QSZ 600 * BUFFER VIRTIO-BUFFERS
( spec says this is 16*qsz bytes long )
VIRTIO-QSZ 16  * BUFFER VIRTIO-DESC-TABLE
( spec gives values for these, but this is a simpler way to do it )
512 BUFFER VIRTIO-AVAIL-RING
512 BUFFER VIRTIO-USED-RING

16  BUFFER READ-HEADER
512 BUFFER READ-BUFFER
1   BUFFER READ-STATUS

16  BUFFER WRITE-HEADER
512 BUFFER WRITE-BUFFER
1   BUFFER WRITE-STATUS

8 BUFFER DESC-FREE-LIST
0 VALUE LAST-SEEN-USED-IDX

( For now, just hardcode where we think the virtio-blk-dev is )
HEX
10008000 VALUE VBD-BASE
VBD-BASE VALUE VBD-MAGIC
VBD-BASE 4 + VALUE VBD-VERSION
VBD-BASE 8 + VALUE VBD-DEVID
VBD-BASE C + VALUE VBD-VNDID
VBD-BASE 10 + VALUE VBD-DEV-FEAT-INFO
VBD-BASE 14 + VALUE VBD-DEV-FEAT-SEL
VBD-BASE 20 + VALUE VBD-DRV-FEAT-INFO
VBD-BASE 24 + VALUE VBD-DRV-FEAT-SEL
VBD-BASE 30 + VALUE VBD-VIRTQ-IDX
VBD-BASE 34 + VALUE VBD-VIRTQ-MAXSZ
VBD-BASE 38 + VALUE VBD-VIRTQ-SIZE
VBD-BASE 44 + VALUE VBD-VIRTQ-RDY
VBD-BASE 50 + VALUE VBD-VIRTQ-NOTF
VBD-BASE 60 + VALUE VBD-INT-STATUS
VBD-BASE 64 + VALUE VBD-INT-ACK
VBD-BASE 70 + VALUE VBD-DEV-STATUS
VBD-BASE 80 + VALUE VBD-DSC-AREA-LO
VBD-BASE 84 + VALUE VBD-DSC-AREA-HI
VBD-BASE 90 + VALUE VBD-DRV-AREA-LO
VBD-BASE 94 + VALUE VBD-DRV-AREA-HI
VBD-BASE A0 + VALUE VBD-DEV-AREA-LO
VBD-BASE A4 + VALUE VBD-DEV-AREA-HI
DECIMAL

( words to get fields inside the virtq avail ring )
( virtio-avail-ring -- virtio-avail-ring.flags )
: AVAIL-RING-FLAGS-ADDR
  0 +
;

: AVAIL-RING-IDX-ADDR
  2 +
;

: AVAIL-RING-RING-ADDR
  4 +
;

: AVAIL-RING-USED-EVENT-ADDR
  6 +
;

( words to get fields inside the virtq descriptor )
: DESC-ADDR-ADDR
  0 +
;

: DESC-LEN-ADDR
  8 +
;

: DESC-FLAGS-ADDR
  12 +
;

: DESC-NEXT-ADDR
  14 +
;

( fields inside the used ring )
: USED-RING-FLAGS-ADDR
  0 +
;
: USED-RING-IDX-ADDR
  2 +
;
: USED-RING-ELEM-ADDR
  4 +
;
: USED-RING-AVAIL-EVENT-ADDR
  VIRTIO-QSZ 8 * +
;

: USED-ELEM-ID-ADDR
  0 +
;

: USED-ELEM-LEN-ADDR
  4 +
;

( buffer-idx -- )
: USE-DESC-IDX
  DESC-FREE-LIST + 1 SWAP C!
;

( -- free-idx )
: GET-FREE-DESCRIPTOR-IDX
  VIRTIO-QSZ 1-
  BEGIN
    DUP 0< NOT
  WHILE
    DUP DESC-FREE-LIST + C@ 0 = IF
      EXIT
    THEN
    1-
  REPEAT
  -1
;

( N -- IDX1 IDX2 .. IDXN )
: GET-FREE-DESCRIPTORS-IDX
  BEGIN
    DUP 0>
  WHILE
    GET-FREE-DESCRIPTOR-IDX ( N -- N IDX )
    DUP -1 = NOT IF
      DUP USE-DESC-IDX
    THEN
    SWAP ( .. -- IDX N )
    1-
  REPEAT
  DROP
;

( to-free-idx -- )
: FREE-DESC-IDX
  DESC-FREE-LIST + 0 SWAP C!
;

( RECURSIVELY FREE A CHAIN OF DESCRIPTORS, FROM THE HEAD IDX )
: FREE-DESC-CHAIN
  DUP ( IDX IDX )
  16 * VIRTIO-DESC-TABLE + ( IDX-TH DESCRIPTOR )
  DESC-NEXT-ADDR H@ ( NEXT FIELD, NEXT IDX )
  ?DUP IF ( IF IDX IS 0, RECURSE )
    RECURSE
  THEN
  FREE-DESC-IDX
;

( i -- offset of ith descriptor )
: DESC-IDX-TO-ADDR
  16 *
  VIRTIO-DESC-TABLE +
;

( -- NEXT-RING-SLOT-ADDR )
: VIRTIO-GET-NEXT-RING-SLOT
  VIRTIO-AVAIL-RING AVAIL-RING-IDX-ADDR H@ ( -- IDX )
  VIRTIO-QSZ MOD ( IDX QSZ -- IDX%QSZ )
  2 * ( STRIDE OF 2 BYTES )
  VIRTIO-AVAIL-RING AVAIL-RING-RING-ADDR ( IDX%QSZ*2 RING[0] -- )
  + ( ADDR OF NEXT AVAILABLE RING SLOT -- )
;

( -- )
: VIRTIO-AVAIL-IDX-INCR
  VIRTIO-AVAIL-RING AVAIL-RING-IDX-ADDR DUP
  H@
  1 +
  SWAP H!
;

( desc-chain-head-idx RING-SLOT-ADDR -- )
: VIRTIO-UPDATE-AVAIL-RING
  H!
  VIRTIO-AVAIL-IDX-INCR
;

: CAPTURE-USED-RING-IDX
  VIRTIO-USED-RING USED-RING-IDX-ADDR H@ TO LAST-SEEN-USED-IDX
;

( flags desc-addr -- desc-addr )
: MAKE-DESCRIPTOR-FLAGS
  TUCK 12 + H!
;

( LEN BUF-ADDR DESC-ADDR -- DESC-ADDR )
: MAKE-DESCRIPTOR
  TUCK !
  TUCK 8 + W!
;

( 0 LEN BUF-ADDR DESC-ADDR -- )
: MAKE-READ-DESCRIPTOR-TAIL
  MAKE-DESCRIPTOR ( -- NEXT-DSC-IDX DESC-ADDR )
  0 SWAP MAKE-DESCRIPTOR-FLAGS
  TUCK 14 + H!
  DROP
;

( 0 LEN BUF-ADDR DESC-ADDR -- )
: MAKE-WRITE-DESCRIPTOR-TAIL
  MAKE-DESCRIPTOR ( -- NEXT-DSC-IDX DESC-ADDR )
  2 SWAP MAKE-DESCRIPTOR-FLAGS
  TUCK 14 + H!
  DROP
;

( NEXT-DSC-IDX LEN BUF-ADDR DESC-ADDR -- )
: MAKE-READ-DESCRIPTOR
  MAKE-DESCRIPTOR ( -- NEXT-DSC-IDX DESC-ADDR )
  1 SWAP MAKE-DESCRIPTOR-FLAGS ( -- NEXT-DSC-IDX DESC-ADDR )
  TUCK 14 + H! ( -- NEXT-DSC-IDX DESC-ADDR )
  DROP
;

( NEXT-DSC-IDX LEN BUF-ADDR DESC-ADDR -- )
: MAKE-WRITE-DESCRIPTOR
  MAKE-DESCRIPTOR
  3 SWAP MAKE-DESCRIPTOR-FLAGS
  TUCK 14 + H!
  DROP
;

( idx1 idx2 .. idxn n -- idx1 idx2 .. idxn OR -1 )
: ERROR-CHECK-DESCRIPTOR-IDXS
  DUP
  BEGIN
    DUP 0>
  WHILE
    DUP 1 + PICK -1 = IF
      SWAP 1 + NDROP
      -1 EXIT
    THEN
    1-
  REPEAT
  DROP DROP
;

( SECTOR-N -- desc-idx-head )
: SUBMIT-READ
  ( FIND 3 AVAILABLE DESCRIPTOR INDICES )
  3 GET-FREE-DESCRIPTORS-IDX ( -- IDX1 IDX2 IDX3 )
  ( error check to confirm we got 3 free descriptors )
  3 ERROR-CHECK-DESCRIPTOR-IDXS
  DUP  0 SWAP 1   SWAP READ-STATUS SWAP DESC-IDX-TO-ADDR MAKE-WRITE-DESCRIPTOR-TAIL ( ... -- IDX1 IDX2 IDX3 )
  OVER        512 SWAP READ-BUFFER SWAP DESC-IDX-TO-ADDR MAKE-WRITE-DESCRIPTOR ( ... -- IDX1 IDX2 )
  OVER        16  SWAP READ-HEADER SWAP DESC-IDX-TO-ADDR MAKE-READ-DESCRIPTOR ( ... -- IDX1 )
  ( IDX1 IS NOW THE DESCRIPTOR-HEAD )
  ( SECTOR-N IDX1 )
  SWAP
  ( NOW, CONFIGURE THE READ REQUEST TYPE, SECTOR )
  READ-HEADER ( IDX1 SECTORN - IDX1 SECTOR-N READ-HEADER-ADDR )
  TUCK 8 + ! ( IDX1 SECTOR-N READ-HEADER-ADDR -- IDX1 READ-HEADER-ADDR )
  0 SWAP W! ( IDX1 READ-HEADER-ADDR -- IDX1 )

  ( NOW THE READ REQUEST BUFFER IS CONFIGURED, STICK THE DESCRIPTOR HEAD INTO THE AVAIL RING. )
  VIRTIO-GET-NEXT-RING-SLOT ( IDX1 -- IDX1 NEXT-RING-SLOT )
  ( FILL AVAIL RING SLOTS WITH CONFIGURED DESCRIPTOR HEAD, ONLY THE ONE )
  OVER -ROT ( IDX1 NEXT-RING-SLOT -- IDX1 IDX1 NEXT-RING-SLOT )
  VIRTIO-UPDATE-AVAIL-RING  ( IDX1 IDX1 NEXT-RING-SLOT -- IDX1 )
;

( i think the logic is to continually check the used-ring until we find this idx )
( submitted-desc-idx -- )
: WAIT-ON-READ
  LAST-SEEN-USED-IDX ( desc-idx -- desc-idx last-idx )
  BEGIN
    VIRTIO-USED-RING USED-RING-IDX-ADDR ( desc-idx last-idx -- desc-idx last-idx curr-idx-addr )
    H@ ( desc-idx last-idx curr-idx-addr -- desc-idx last curr )
    OVER = NOT IF ( if last idx isn't the same as current idx )
      8 * VIRTIO-USED-RING USED-RING-ELEM-ADDR + ( desc-idx -- desc-idx used_elem[idx] )
      USED-ELEM-ID-ADDR ( desc-idx used_elem[idx] -- desc-idx used_elem[idx].id-addr )
      W@ ( ... -- desc-idx used_elem[idx].id )
      SWAP DUP -ROT ( desc-idx used_elem_id -- desc-idx id desc-idx )
      = IF ( ... -- desc-idx )
        FREE-DESC-CHAIN
        EXIT
      THEN
    THEN
  AGAIN
;

( i think the logic is to continually check the used-ring until we find this idx )
( submitted-desc-idx -- )
: WAIT-ON-WRITE
  LAST-SEEN-USED-IDX ( desc-idx -- desc-idx last-idx )
  BEGIN
    VIRTIO-USED-RING USED-RING-IDX-ADDR ( desc-idx last-idx -- desc-idx last-idx curr-idx-addr )
    H@ ( desc-idx last-idx curr-idx-addr -- desc-idx last curr )
    OVER = NOT IF ( if last idx isn't the same as current idx )
      8 * VIRTIO-USED-RING USED-RING-ELEM-ADDR + ( desc-idx -- desc-idx used_elem[idx] )
      USED-ELEM-ID-ADDR ( desc-idx used_elem[idx] -- desc-idx used_elem[idx].id-addr )
      W@ ( ... -- desc-idx used_elem[idx].id )
      SWAP DUP -ROT ( desc-idx used_elem_id -- desc-idx id desc-idx )
      = IF ( ... -- desc-idx )
        FREE-DESC-CHAIN
        EXIT
      THEN
    THEN
  AGAIN
;

: VIRTQ-CONFIGURE
  0 VBD-VIRTQ-IDX W!
  VBD-VIRTQ-RDY @ 0 = ( CHECK IF READY IS 0 )
  UNLESS
     ." VIRTQUEUE READY STATUS NON-ZERO"
     ABORT
  THEN
  VBD-VIRTQ-MAXSZ @ 0 =
  IF
    ." MAXSIZE IS ZERO, DEVICE UNAVAILABLE"
    ABORT
  THEN
  VIRTIO-QSZ VBD-VIRTQ-SIZE W!
  VIRTIO-DESC-TABLE HIBITS VBD-DSC-AREA-HI W!
  VIRTIO-DESC-TABLE LOBITS VBD-DSC-AREA-LO W!
  VIRTIO-AVAIL-RING HIBITS VBD-DRV-AREA-HI W!
  VIRTIO-AVAIL-RING LOBITS VBD-DRV-AREA-LO W!
  VIRTIO-USED-RING HIBITS VBD-DEV-AREA-HI W!
  VIRTIO-USED-RING LOBITS VBD-DEV-AREA-LO W!
  1 VBD-VIRTQ-RDY W!
;

( VIRTIO-BASE-ADDR -- VIRTIO-DEVID )
: GET-VIRTIO-DEVID
  VBD-DEVID @ LOBITS
;

( capture the last index )
: CAPTURE-IDX
  VIRTIO-USED-RING USED-RING-IDX-ADDR H@ TO LAST-SEEN-USED-IDX
;

: POKE-VIRTQ
  0 VBD-VIRTQ-NOTF W!
;

( SECTOR-N -- desc-idx-head )
: SUBMIT-WRITE
  ( FIND 2 AVAILABLE DESCRIPTOR INDICES )
  3 GET-FREE-DESCRIPTORS-IDX ( -- IDX1 IDX2 )
  ( error check to confirm we got 3 free descriptors )
  3 ERROR-CHECK-DESCRIPTOR-IDXS
  3 ERROR-CHECK-DESCRIPTOR-IDXS
  DUP  0 SWAP 1   SWAP WRITE-STATUS SWAP DESC-IDX-TO-ADDR MAKE-WRITE-DESCRIPTOR-TAIL ( ... -- IDX1 IDX2 IDX3 )
  OVER        512 SWAP WRITE-BUFFER SWAP DESC-IDX-TO-ADDR MAKE-READ-DESCRIPTOR ( ... -- IDX1 IDX2 )
  OVER        16  SWAP WRITE-HEADER SWAP DESC-IDX-TO-ADDR MAKE-READ-DESCRIPTOR ( ... -- IDX1 )
  ( IDX1 IS NOW THE DESCRIPTOR-HEAD )
  ( SECTOR-N IDX1 )
  SWAP
  ( NOW, CONFIGURE THE READ REQUEST TYPE, SECTOR )
  WRITE-HEADER ( IDX1 SECTORN - IDX1 SECTOR-N READ-HEADER-ADDR )
  TUCK 8 + ! ( IDX1 SECTOR-N READ-HEADER-ADDR -- IDX1 READ-HEADER-ADDR )
  1 SWAP W! ( IDX1 READ-HEADER-ADDR -- IDX1 )

  ( NOW THE READ REQUEST BUFFER IS CONFIGURED, STICK THE DESCRIPTOR HEAD INTO THE AVAIL RING. )
  VIRTIO-GET-NEXT-RING-SLOT ( IDX1 -- IDX1 NEXT-RING-SLOT )
  ( FILL AVAIL RING SLOTS WITH CONFIGURED DESCRIPTOR HEAD, ONLY THE ONE )
  OVER -ROT ( IDX1 NEXT-RING-SLOT -- IDX1 IDX1 NEXT-RING-SLOT )
  VIRTIO-UPDATE-AVAIL-RING  ( IDX1 IDX1 NEXT-RING-SLOT -- IDX1 )
;

( read-req-desc-head-idx -- )
: DUMP-READ-BUF
  DESC-IDX-TO-ADDR DESC-NEXT-ADDR H@
  DESC-IDX-TO-ADDR DUP DESC-ADDR-ADDR @
  SWAP DESC-LEN-ADDR W@
  DUMP
;

( len src-addr -- )
: COPY-TO-WRITEBUF
  WRITE-BUFFER SWAP CMOVE
;

( sector-n -- <completed write> )
: DO-WRITE
  SUBMIT-WRITE POKE-VIRTQ DUP WAIT-ON-WRITE
;

( sector-n -- <completed read> )
: DO-READ
  SUBMIT-READ POKE-VIRTQ DUP WAIT-ON-READ
;

( read-desc-idx -- data-addr )
: IDX-TO-DATA-ADDR
  DESC-IDX-TO-ADDR DESC-NEXT-ADDR H@
  DESC-IDX-TO-ADDR DESC-ADDR-ADDR @
;

VIRTQ-CONFIGURE
0 DO-READ

( So now I can write sectors: 512 src-addr COPY-TO-WRITEBUF <SECTORNUM> SUBMIT-WRITE POKE-VIRTQ DUP WAIT-ON-WRITE )
